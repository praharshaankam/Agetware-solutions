{"cells":[{"cell_type":"code","source":"# --- Indian Number Formatting ---\n\n# Input: A floating-point number\nnumber_input = 123456789.12345\n# Example: 123456.7891 should return 1,23,456.7891\n# Example: 123456789.12345 should return 12,34,56,789.12345\n\n# Convert the number to a string to easily separate integer and fractional parts\ns_number = str(number_input)\n\n# Split the string into integer and fractional parts\nif '.' in s_number:\n    integer_part, fractional_part = s_number.split('.')\nelse:\n    integer_part = s_number\n    fractional_part = \"\"\n\n# Reverse the integer part to make it easier to apply the Indian comma rule from the right\nreversed_integer = integer_part[::-1]\nformatted_integer = []\n\n# Add the first three digits (from the right)\nif len(reversed_integer) > 0:\n    formatted_integer.append(reversed_integer[0])\nif len(reversed_integer) > 1:\n    formatted_integer.append(reversed_integer[1])\nif len(reversed_integer) > 2:\n    formatted_integer.append(reversed_integer[2])\n\n# Add a comma after the first three digits if there are more digits\nif len(reversed_integer) > 3:\n    formatted_integer.append(',')\n\n# Process the remaining digits, adding commas every two digits\nfor i in range(3, len(reversed_integer)):\n    formatted_integer.append(reversed_integer[i])\n    # Add a comma after every two digits, starting from the 4th digit\n    if (i - 2) % 2 == 0 and i < len(reversed_integer) - 1:\n        formatted_integer.append(',')\n\n# Reverse the formatted integer part back to its original order\nindian_formatted_integer = \"\".join(formatted_integer[::-1])\n\n# Combine the formatted integer part with the fractional part (if any)\nif fractional_part:\n    indian_number_string = f\"{indian_formatted_integer}.{fractional_part}\"\nelse:\n    indian_number_string = indian_formatted_integer\n\nprint(f\"Original Number: {number_input}\")\nprint(f\"Indian Formatted String: {indian_number_string}\")\n\n# --- Test Cases ---\nprint(\"\\n--- Test Cases ---\")\n\ntest_numbers = [\n    123456.7891,\n    123.45,\n    1234.56,\n    12345.67,\n    1234567.89,\n    12345678.90,\n    123456789.01,\n    1,\n    10,\n    100,\n    1000,\n    10000,\n    100000,\n    1000000,\n    10000000,\n    0.123,\n    -123456.7891 # Handle negative numbers\n]\n\nfor num in test_numbers:\n    s_number = str(num)\n    is_negative = False\n    if s_number.startswith('-'):\n        is_negative = True\n        s_number = s_number[1:] # Remove the negative sign for processing\n\n    if '.' in s_number:\n        integer_part, fractional_part = s_number.split('.')\n    else:\n        integer_part = s_number\n        fractional_part = \"\"\n\n    reversed_integer = integer_part[::-1]\n    formatted_integer = []\n\n    if len(reversed_integer) > 0:\n        formatted_integer.append(reversed_integer[0])\n    if len(reversed_integer) > 1:\n        formatted_integer.append(reversed_integer[1])\n    if len(reversed_integer) > 2:\n        formatted_integer.append(reversed_integer[2])\n\n    if len(reversed_integer) > 3:\n        formatted_integer.append(',')\n\n    for i in range(3, len(reversed_integer)):\n        formatted_integer.append(reversed_integer[i])\n        if (i - 2) % 2 == 0 and i < len(reversed_integer) - 1:\n            formatted_integer.append(',')\n\n    indian_formatted_integer = \"\".join(formatted_integer[::-1])\n\n    if fractional_part:\n        indian_number_string = f\"{indian_formatted_integer}.{fractional_part}\"\n    else:\n        indian_number_string = indian_formatted_integer\n\n    if is_negative:\n        indian_number_string = '-' + indian_number_string\n\n    print(f\"Original: {num:<15} -> Indian: {indian_number_string}\")","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}